flux是一个架构 并不完整 它是一个概念，构想，蓝图  在它的基础之上 可以衍生出 其他已经实现的框架（redux）
他确实也有一些成熟的框架    而且自身也有一些实现



学习内容：
    基本概念
    运行原理


架构  flux
框架  redux

flux：产生的原因
    确保数据单向流动
        好处：对数据管理 确定性较高   双绑定可以处理复杂问题但是比较麻烦


flux目的：
    action 命令：
        作用：发出一个动作  对命令进行统一化处理（dom事件，url，自定义行为）
        数据结构也进行了统一化

    Dispatcher 协调器
        作用：接受所有的action  把action发布到 store
        好处：可以加中间件  从actions到真正更改store 中间的一个过渡 可以做一些其他生命周期的事情


    store 数据管理器
        作用：数据统一管理


    React Views
        运用程序最上层有统一的组件 相当于一个容器


    整体过程：
        react组件（React Views）发出一个指令（User Insteractions 比如：DOM事件）
        内部方法（Action Creators）创建一个 （Actions）

        创建好之后 Actions对象会加入到 （调度器当中）Dispatcher

        加入到调度器之后 内部会把分发到全部的store  一般来说 store对应一个顶级的react组件


        一般来说一个就够了  如果很复杂的话  可以把他拆分成很多个

        内部会调用全部的store  store内部会根据action类别和提供的数据 更改自身的数据

        刷新 视图（React Views） 通过事件监听的方式   也就是说 React Views监听了一个store的一个事件

        （比如说 他监听 谁更改了用户的名字 如果更改  就自身进行渲染，并且他会把store整个状态数据 全部往他的子组件下发整体 进行渲染）


        创建Actions有可能调用网络的Api（Web API Web API Utils  比如：与服务器相沟通）在这个过程当中
        个人认为是： 一种确认


            比如：创建一个用户信息  创建的时候 在这个过程当中  有两个任务  第一 先创建一个Actions （比如 ：先创建一个用户信息）

            第二：异步的情况  发出一个指令和服务器进行沟通  异步返回一个信息
            创建成功之后 还会发出一个 Actions 确认 界面可能有一些提示（这些都是我们自定义的）



为了深入理解flux 我们把这些 组件  从头到尾  自己开发一篇  也就是说做一个自己  的框架


store 数据提供者














